// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Initial queue only contains startDelay pause. 1`] = `
[
  {
    "delay": 250,
    "shouldPauseCursor": [Function],
  },
]
`;

exports[`Returns an object with expected properties. 1`] = `
[
  "break",
  "delete",
  "destroy",
  "empty",
  "exec",
  "flush",
  "freeze",
  "getElement",
  "getOptions",
  "getQueue",
  "go",
  "is",
  "move",
  "options",
  "pause",
  "reset",
  "type",
  "unfreeze",
  "updateOptions",
]
`;

exports[`break() Should should queue break character object. 1`] = `
[
  {
    "delay": 250,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
]
`;

exports[`delete() Should queue pause after string when defined. 1`] = `
{
  "delay": 300,
  "shouldPauseCursor": [Function],
}
`;

exports[`delete() Should queue pause correctly when options are passed. 1`] = `
{
  "delay": 200,
  "shouldPauseCursor": [Function],
}
`;

exports[`delete() Should queue pause correctly when single digit is passed. 1`] = `
{
  "delay": 50,
  "shouldPauseCursor": [Function],
}
`;

exports[`delete() Should temporarily update options when specified. 1`] = `
[
  {
    "delay": 250,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
]
`;

exports[`empty() addSplitPause() Adds different even split pause around strings. 1`] = `
[
  {
    "delay": 250,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "char": A,
    "delay": 0,
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "char": B,
    "delay": 0,
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "char": C,
    "delay": 0,
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "delay": 500,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "delay": 500,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "char": E,
    "delay": 0,
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "char": F,
    "delay": 0,
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "char": G,
    "delay": 0,
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
]
`;

exports[`empty() addSplitPause() Adds even split pause around strings. 1`] = `
[
  {
    "delay": 250,
    "shouldPauseCursor": [Function],
  },
]
`;

exports[`empty() addSplitPause() Adds split pause around strings when value is array. 1`] = `
[
  {
    "delay": 250,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "char": A,
    "delay": 0,
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "char": B,
    "delay": 0,
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "char": C,
    "delay": 0,
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "delay": 100,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "delay": 500,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "char": E,
    "delay": 0,
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "char": F,
    "delay": 0,
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "char": G,
    "delay": 0,
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
]
`;

exports[`empty() addSplitPause() Inserts split pause around multiple strings. 1`] = `
[
  {
    "delay": 250,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "char": A,
    "delay": 0,
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "delay": 375,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "delay": 375,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "char": B,
    "delay": 0,
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "delay": 375,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "delay": 375,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "char": C,
    "delay": 0,
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "delay": 375,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "delay": 375,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "char": D,
    "delay": 0,
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "delay": 375,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "delay": 375,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "char": E,
    "delay": 0,
    "func": [Function],
    "shouldPauseCursor": [Function],
    "typeable": true,
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
]
`;

exports[`move() Should queue pause after string when defined. 1`] = `
{
  "delay": 300,
  "shouldPauseCursor": [Function],
}
`;

exports[`move() Should queue pause correctly when options are passed. 1`] = `
{
  "delay": 200,
  "shouldPauseCursor": [Function],
}
`;

exports[`move() Should temporarily update options when specified. 1`] = `
[
  {
    "delay": 250,
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
  {
    "func": [Function],
    "shouldPauseCursor": [Function],
  },
]
`;

exports[`reset() Successfully resets when called. 1`] = `
{
  "afterComplete": [Function],
  "afterStep": [Function],
  "afterString": [Function],
  "beforeStep": [Function],
  "beforeString": [Function],
  "breakLines": true,
  "cursor": {
    "animation": {
      "frames": [
        {
          "opacity": 0,
        },
        {
          "opacity": 0,
        },
        {
          "opacity": 1,
        },
      ],
      "options": {
        "easing": "steps(2, start)",
        "fill": "forwards",
        "iterations": Infinity,
      },
    },
    "autoPause": true,
    "autoPauseDelay": 500,
  },
  "cursorChar": "|",
  "cursorSpeed": 1000,
  "deleteSpeed": null,
  "html": true,
  "lifeLike": true,
  "loop": false,
  "loopDelay": [
    375,
    375,
  ],
  "nextStringDelay": [
    375,
    375,
  ],
  "speed": 100,
  "startDelay": 250,
  "startDelete": false,
  "strings": [
    "This is my string!",
  ],
  "waitUntilVisible": false,
}
`;

exports[`type() Should queue pause after string when defined. 1`] = `
{
  "delay": 300,
  "shouldPauseCursor": [Function],
}
`;

exports[`type() Should queue pause correctly when options are passed. 1`] = `
{
  "delay": 200,
  "shouldPauseCursor": [Function],
}
`;
